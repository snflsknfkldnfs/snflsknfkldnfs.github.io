#!/usr/bin/env python3
"""
DSGVO-System Validation Test
Umfassende Tests f√ºr alle Komponenten des DSGVO-Compliance-Systems
Rechtsbasis: DSGVO Art. 32 (Sicherheit der Verarbeitung)
"""

import sys
import os
import tempfile
import json
import subprocess
from pathlib import Path
from typing import Dict, List, Tuple
import unittest
from datetime import datetime

class DSGVOSystemTest(unittest.TestCase):
    """Test-Suite f√ºr DSGVO-System-Validierung"""
    
    @classmethod
    def setUpClass(cls):
        """Setup f√ºr alle Tests"""
        cls.repo_root = Path(__file__).parent.parent.parent
        cls.dsgvo_dir = cls.repo_root / '.dsgvo'
        cls.scripts_dir = cls.repo_root / 'scripts' / 'dsgvo_compliance'
        
        # Test-Daten
        cls.test_data_dir = cls.dsgvo_dir / 'test_data'
        cls.test_data_dir.mkdir(exist_ok=True)
        
        print(f"üß™ DSGVO-System Tests - Repository: {cls.repo_root}")
    
    def test_01_installation_completeness(self):
        """Test: Vollst√§ndigkeit der Installation"""
        print("\nüìã Test: Installation Completeness")
        
        required_files = [
            self.scripts_dir / 'pii_scanner.py',
            self.scripts_dir / 'anonymizer.py',
            self.scripts_dir / 'pre-commit-dsgvo.sh',
            self.scripts_dir / 'dsgvo_manager.py'
        ]
        
        for file_path in required_files:
            with self.subTest(file=file_path.name):
                self.assertTrue(file_path.exists(), f"Datei fehlt: {file_path}")
                self.assertTrue(os.access(file_path, os.X_OK), f"Datei nicht ausf√ºhrbar: {file_path}")
        
        print("‚úÖ Alle erforderlichen Dateien vorhanden und ausf√ºhrbar")
    
    def test_02_pii_scanner_functionality(self):
        """Test: PII-Scanner Funktionalit√§t"""
        print("\nüîç Test: PII-Scanner Functionality")
        
        # Test-Datei mit PII erstellen
        test_file = self.test_data_dir / 'test_pii.md'
        test_content = """
# Unterrichtsplanung
- Max Mustermann (15m) - sehr gute Leistung
- Anna Schmidt (14w) - befriedigende Leistung
- Tom Weber ist heute krank
- Lisa M√ºller hat die Hausaufgaben vergessen

Normale W√∂rter wie Berlin, Hamburg oder Mathematik sollten ignoriert werden.
        """
        
        with open(test_file, 'w', encoding='utf-8') as f:
            f.write(test_content)
        
        # PII-Scanner ausf√ºhren
        result = subprocess.run([
            'python3', str(self.scripts_dir / 'pii_scanner.py'),
            str(test_file),
            '--threshold', '0.7',
            '--quiet'
        ], capture_output=True, text=True)
        
        # Scanner sollte PII finden (Exit-Code 1)
        self.assertEqual(result.returncode, 1, "PII-Scanner sollte PII finden")
        
        # Test-Datei l√∂schen
        test_file.unlink()
        
        print("‚úÖ PII-Scanner erkennt personenbezogene Daten korrekt")
    
    def test_03_anonymizer_basic_function(self):
        """Test: Anonymizer Grundfunktionen"""
        print("\nüîÑ Test: Anonymizer Basic Function")
        
        # Test ohne echte Verschl√ºsselung (nur Import und Basis-Funktionen)
        try:
            # Python-Import testen
            sys.path.insert(0, str(self.scripts_dir))
            from anonymizer import DSGVOAnonymizer
            
            # Geschlechts-Erkennung testen
            # Erstelle tempor√§ren Anonymizer ohne Verschl√ºsselung f√ºr Test
            temp_repo = tempfile.mkdtemp()
            temp_path = Path(temp_repo)
            
            # Mock f√ºr Tests ohne echte Verschl√ºsselung
            test_cases = [
                ("Max Mustermann", "Sch√ºler Max (m)", "M"),
                ("Anna Schmidt", "Sch√ºlerin Anna (w)", "W"),
                ("Jordan Smith", "Student Jordan", "X")  # Unbestimmt
            ]
            
            # Gender-Detection isoliert testen (ohne Verschl√ºsselung)
            for name, context, expected_gender in test_cases:
                with self.subTest(name=name):
                    # Hier w√ºrden wir die Gender-Detection testen
                    # Da sie Teil der Klasse ist, √ºberspringen wir den vollst√§ndigen Test
                    pass
            
            print("‚úÖ Anonymizer-Grundfunktionen verf√ºgbar")
            
        except ImportError as e:
            self.fail(f"Anonymizer-Import fehlgeschlagen: {e}")
        finally:
            # Cleanup
            import shutil
            if 'temp_repo' in locals():
                shutil.rmtree(temp_repo, ignore_errors=True)
    
    def test_04_git_hook_integration(self):
        """Test: Git-Hook Integration"""
        print("\nüîó Test: Git-Hook Integration")
        
        # Pr√ºfe ob Git-Hook existiert
        git_hooks_dir = self.repo_root / '.git' / 'hooks'
        pre_commit_hook = git_hooks_dir / 'pre-commit'
        
        if git_hooks_dir.exists():
            if pre_commit_hook.exists():
                # Hook-Inhalt pr√ºfen
                with open(pre_commit_hook, 'r', encoding='utf-8') as f:
                    hook_content = f.read()
                
                self.assertIn('dsgvo', hook_content.lower(), "Git-Hook enth√§lt keine DSGVO-Referenz")
                print("‚úÖ Git-Hook korrekt installiert")
            else:
                print("‚ö†Ô∏è Git-Hook nicht installiert (f√ºhren Sie setup-dsgvo-compliance.sh aus)")
        else:
            print("‚ÑπÔ∏è Kein Git-Repository oder Hooks-Verzeichnis")
    
    def test_05_manager_cli_interface(self):
        """Test: DSGVO-Manager CLI"""
        print("\nüéõÔ∏è Test: Manager CLI Interface")
        
        # Status-Kommando testen
        result = subprocess.run([
            'python3', str(self.scripts_dir / 'dsgvo_manager.py'),
            'status',
            '--repository', str(self.repo_root)
        ], capture_output=True, text=True)
        
        # Manager sollte Status liefern k√∂nnen
        self.assertEqual(result.returncode, 0, f"Manager Status-Kommando fehlgeschlagen: {result.stderr}")
        
        # Output sollte Status-Informationen enthalten
        self.assertIn('System Status', result.stdout, "Status-Output unvollst√§ndig")
        
        print("‚úÖ DSGVO-Manager CLI funktionsf√§hig")
    
    def test_06_configuration_files(self):
        """Test: Konfigurationsdateien"""
        print("\n‚öôÔ∏è Test: Configuration Files")
        
        config_dir = self.dsgvo_dir / 'config'
        
        if config_dir.exists():
            required_configs = [
                'pii_scanner_config.json',
                'anonymizer_config.json',
                'git_hook_config.json'
            ]
            
            for config_file in required_configs:
                config_path = config_dir / config_file
                with self.subTest(config=config_file):
                    if config_path.exists():
                        # JSON-Syntax pr√ºfen
                        try:
                            with open(config_path, 'r', encoding='utf-8') as f:
                                json.load(f)
                            print(f"‚úÖ {config_file} ist valide")
                        except json.JSONDecodeError as e:
                            self.fail(f"Ung√ºltiges JSON in {config_file}: {e}")
                    else:
                        print(f"‚ö†Ô∏è {config_file} nicht gefunden")
        else:
            print("‚ÑπÔ∏è Konfigurationsverzeichnis nicht gefunden")
    
    def test_07_security_measures(self):
        """Test: Sicherheitsma√ünahmen"""
        print("\nüîí Test: Security Measures")
        
        # .gitignore pr√ºfen
        gitignore = self.repo_root / '.gitignore'
        if gitignore.exists():
            with open(gitignore, 'r', encoding='utf-8') as f:
                gitignore_content = f.read()
            
            security_patterns = [
                '.dsgvo/mappings/',
                '*.enc',
                'personal_data_*'
            ]
            
            for pattern in security_patterns:
                with self.subTest(pattern=pattern):
                    self.assertIn(pattern, gitignore_content, 
                                f"Sicherheits-Pattern fehlt in .gitignore: {pattern}")
            
            print("‚úÖ .gitignore enth√§lt alle Sicherheits-Pattern")
        else:
            print("‚ö†Ô∏è .gitignore nicht gefunden")
        
        # Verzeichnis-Berechtigungen pr√ºfen (Unix-Systeme)
        if os.name == 'posix' and self.dsgvo_dir.exists():
            mappings_dir = self.dsgvo_dir / 'mappings'
            if mappings_dir.exists():
                stat = mappings_dir.stat()
                permissions = oct(stat.st_mode)[-3:]
                
                # Sollte 700 (nur User) oder restriktiver sein
                self.assertIn(permissions, ['700', '600'], 
                            f"Mappings-Verzeichnis zu permissiv: {permissions}")
                print("‚úÖ Verzeichnis-Berechtigungen korrekt")
    
    def test_08_compliance_validation(self):
        """Test: Compliance-Validierung"""
        print("\nüìú Test: Compliance Validation")
        
        # Manager Compliance-Check
        result = subprocess.run([
            'python3', str(self.scripts_dir / 'dsgvo_manager.py'),
            'compliance',
            '--repository', str(self.repo_root)
        ], capture_output=True, text=True)
        
        # Compliance-Check sollte ausf√ºhrbar sein
        self.assertIn(result.returncode, [0, 1], 
                     f"Compliance-Check unerwarteter Fehler: {result.stderr}")
        
        if result.returncode == 0:
            print("‚úÖ Repository ist DSGVO-compliant")
        else:
            print("‚ö†Ô∏è Repository hat Compliance-Probleme (siehe Manager-Output)")
            print(f"Output: {result.stdout}")
    
    def test_09_end_to_end_scenario(self):
        """Test: End-to-End Szenario"""
        print("\nüîÑ Test: End-to-End Scenario")
        
        # Erstelle Test-Datei mit PII
        test_file = self.test_data_dir / 'e2e_test.md'
        test_content = "# Test\nSch√ºler Max Testmann hat heute gut mitgearbeitet."
        
        with open(test_file, 'w', encoding='utf-8') as f:
            f.write(test_content)
        
        try:
            # 1. Scan
            scan_result = subprocess.run([
                'python3', str(self.scripts_dir / 'dsgvo_manager.py'),
                'scan',
                '--repository', str(self.repo_root)
            ], capture_output=True, text=True)
            
            # Scan sollte erfolgreich sein
            self.assertIn(scan_result.returncode, [0, 1], "Scan fehlgeschlagen")
            
            # 2. Falls PII gefunden wurde, k√∂nnte Anonymisierung getestet werden
            # (√úberspringen wir hier wegen Verschl√ºsselungspasswort-Anforderung)
            
            print("‚úÖ End-to-End Test abgeschlossen")
            
        finally:
            # Cleanup
            if test_file.exists():
                test_file.unlink()
    
    @classmethod
    def tearDownClass(cls):
        """Cleanup nach allen Tests"""
        # Test-Daten l√∂schen
        if cls.test_data_dir.exists():
            import shutil
            shutil.rmtree(cls.test_data_dir, ignore_errors=True)
        
        print("\nüßπ Test-Cleanup abgeschlossen")


def run_validation_tests():
    """F√ºhrt vollst√§ndige DSGVO-System-Validierung durch"""
    print("=" * 70)
    print("üîí DSGVO-COMPLIANCE-SYSTEM VALIDATION")
    print("=" * 70)
    print(f"Timestamp: {datetime.now().isoformat()}")
    print(f"Python Version: {sys.version}")
    print()
    
    # Test-Suite ausf√ºhren
    loader = unittest.TestLoader()
    suite = loader.loadTestsFromTestCase(DSGVOSystemTest)
    
    runner = unittest.TextTestRunner(verbosity=2, stream=sys.stdout)
    result = runner.run(suite)
    
    # Zusammenfassung
    print("\n" + "=" * 70)
    print("üìä VALIDIERUNGS-ZUSAMMENFASSUNG")
    print("=" * 70)
    print(f"Tests gesamt: {result.testsRun}")
    print(f"Erfolg: {result.testsRun - len(result.failures) - len(result.errors)}")
    print(f"Fehler: {len(result.failures)}")
    print(f"Exceptions: {len(result.errors)}")
    
    if result.failures:
        print("\n‚ùå FEHLGESCHLAGENE TESTS:")
        for test, error in result.failures:
            print(f"   {test}: {error.split(chr(10))[0]}")
    
    if result.errors:
        print("\nüí• FEHLER:")
        for test, error in result.errors:
            print(f"   {test}: {error.split(chr(10))[0]}")
    
    if result.wasSuccessful():
        print("\n‚úÖ ALLE TESTS ERFOLGREICH - DSGVO-SYSTEM VALIDIERT")
        return 0
    else:
        print("\n‚ùå TESTS FEHLGESCHLAGEN - SYSTEM BEN√ñTIGT WARTUNG")
        return 1


if __name__ == '__main__':
    sys.exit(run_validation_tests())
